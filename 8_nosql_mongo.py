# -*- coding: utf-8 -*-
"""8_NoSQL_Mongo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/jazaineam1/BigData2023_2/blob/main/Cuadernos/8_NoSQL_Mongo.ipynb

# ***No Sql y Mongodb***


## ***Universidad Central***
>## **Facultad de Ingenier√≠a y Ciencias B√°sicas.**
>## ***Maestr√≠a en anal√≠tica de datos***
![Im√°gen1](https://www.ucentral.edu.co/themes/ucentral/img/template/Universidad%20Central.png)


>## ***Big Data.***

**¬øQu√© son las bases de datos NoSQL?**

Las bases de datos NoSQL (Not Only SQL) son sistemas de gesti√≥n de bases de datos que difieren en su enfoque con respecto a las bases de datos relacionales tradicionales. Est√°n dise√±adas para manejar datos no estructurados o semiestructurados y permiten un almacenamiento y recuperaci√≥n de datos m√°s flexible y escalable. Aqu√≠ hay cinco caracter√≠sticas para ayudar a comprender este concepto:

1. üóÇÔ∏è **Flexibilidad de Esquema:** A diferencia de las bases de datos relacionales, las bases de datos NoSQL no requieren un esquema fijo. Puedes almacenar datos en formato JSON, XML o documentos BSON sin necesidad de definir tablas y columnas.

2. üöÄ **Escalabilidad Horizontal:** Las bases de datos NoSQL son altamente escalables, lo que significa que puedes distribuir f√°cilmente tu base de datos en m√∫ltiples servidores para manejar grandes vol√∫menes de datos y cargas de trabajo.

3. üåê **Diversidad de Modelos de Datos:** Existen varios tipos de bases de datos NoSQL, como las basadas en documentos, columnas, grafos y clave-valor. Cada una se adapta a diferentes tipos de datos y casos de uso.

4. üîÑ **Alta Disponibilidad y Tolerancia a Fallos:** Estas bases de datos suelen ser dise√±adas para ofrecer alta disponibilidad y tolerancia a fallos, lo que garantiza que los datos est√©n siempre accesibles.

5. üìä **Aplicaciones Diversas:** Las bases de datos NoSQL se utilizan en una amplia variedad de aplicaciones, desde redes sociales y aplicaciones web hasta IoT y an√°lisis de datos.

**Ejemplos de Bases de Datos NoSQL:**

1. **MongoDB (Base de Datos de Documentos):** MongoDB es una base de datos NoSQL popular que almacena datos en documentos BSON. Por ejemplo, puedes tener una colecci√≥n de documentos para usuarios, cada uno con campos diferentes seg√∫n sus necesidades.

![](https://webimages.mongodb.com/_com_assets/cms/1-lwnlfl1ryn.png?auto=format%2Ccompress&ch=DPR)

2. **Cassandra (Base de Datos de Columnas):** Cassandra es una base de datos de columnas utilizada para grandes vol√∫menes de datos y alta escalabilidad. Es adecuada para aplicaciones como la gesti√≥n de registros de eventos.

![](https://www.instaclustr.com/wp-content/uploads/2021/10/Cassandra-Partitions-Partition-and-Clustering-Key.png)

3. **Neo4j (Base de Datos de Grafos):** Neo4j se utiliza para almacenar datos relacionales y su estructura se basa en nodos y relaciones. Es ideal para aplicaciones que requieren un an√°lisis de grafos, como redes sociales.

![](https://miro.medium.com/v2/resize:fit:1400/1*dXf5fsV3siWk20lT8X5_ew.png)

**Ventajas de las Bases de Datos NoSQL:**

1. üåü **Flexibilidad de Esquema:** Las bases de datos NoSQL permiten cambios en la estructura de los datos sin requerir modificaciones en un esquema fijo. Esto es beneficioso para aplicaciones en evoluci√≥n.

2. üöÄ **Escalabilidad Horizontal:** Son altamente escalables y permiten distribuir datos en m√∫ltiples servidores para manejar grandes vol√∫menes de informaci√≥n y cargas de trabajo crecientes.

3. üíª **Manejo de Datos No Estructurados:** Pueden manejar datos no estructurados o semi-estructurados, como documentos JSON, que se ajustan bien a la web y aplicaciones modernas.

4. üõ°Ô∏è **Tolerancia a Fallos y Alta Disponibilidad:** Muchas bases de datos NoSQL ofrecen replicaci√≥n autom√°tica y tolerancia a fallos, lo que garantiza la disponibilidad continua de datos.

5. üîÑ **Modelos de Datos Diversos:** Existen varios tipos de bases de datos NoSQL, lo que permite a los desarrolladores elegir el modelo de datos m√°s adecuado para su aplicaci√≥n (documentos, columnas, grafos, clave-valor).

**Desventajas de las Bases de Datos NoSQL:**

1. üß© **Complejidad de Consultas:** En comparaci√≥n con las bases de datos relacionales, algunas bases de datos NoSQL pueden carecer de la capacidad para realizar consultas complejas o realizar agregaciones avanzadas.

2. üíæ **Falta de Transacciones ACID:** Muchas bases de datos NoSQL sacrifican la consistencia ACID (Atomicidad, Consistencia, Aislamiento, Durabilidad) en favor de un rendimiento y escalabilidad mejorados.

3. üöß **Menos Madurez y Ecosistema:** Algunas bases de datos NoSQL pueden carecer de una comunidad tan grande y madura como las bases de datos relacionales, lo que puede resultar en menos recursos y soporte disponibles.

4. üíº **Falta de Est√°ndares:** Los est√°ndares en el mundo de las bases de datos NoSQL var√≠an seg√∫n el tipo y la implementaci√≥n, lo que puede dificultar la migraci√≥n entre sistemas.

5. üí≥ **Costos Asociados:** Aunque inicialmente pueden ser m√°s econ√≥micos en t√©rminos de hardware, a largo plazo, los costos operativos pueden aumentar debido a la necesidad de administrar sistemas altamente escalables.

## Mongodb

![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRln12Czb3Uw73gzCaSO-FSvLEeuQ_Ikr67lKtUmfX3k7aZT5MBtnZUa6B5isewEJXorg&usqp=CAU)


**Historia y Evoluci√≥n de MongoDB:**

üå± **Or√≠genes:** MongoDB fue desarrollado por la compa√±√≠a 10gen Inc. (ahora MongoDB Inc.) y se lanz√≥ por primera vez en 2009. El proyecto se inspir√≥ en sistemas de base de datos orientados a documentos como CouchDB y Lotus Notes.

üîÑ **Versiones Principales:** A lo largo de los a√±os, MongoDB ha experimentado m√∫ltiples versiones y actualizaciones importantes. Algunas de las versiones m√°s notables incluyen MongoDB 1.0 en 2009, MongoDB 2.2 en 2012 con caracter√≠sticas de agregaci√≥n, MongoDB 3.0 en 2015 con almacenamiento en cable y MongoDB 4.0 en 2018 con transacciones ACID.

üë• **Community y Enterprise Edition:** MongoDB est√° disponible en dos ediciones: Community Edition, que es de c√≥digo abierto y gratuita, y Enterprise Edition, que ofrece caracter√≠sticas adicionales y soporte comercial. Esta dualidad ha permitido su adopci√≥n tanto en proyectos de c√≥digo abierto como en empresas.

‚òÅÔ∏è **Ecosistema:** MongoDB ha desarrollado un rico ecosistema de herramientas y servicios relacionados, como MongoDB Atlas, una plataforma de bases de datos en la nube, y el lenguaje de consulta Aggregation Framework, que permite consultas m√°s avanzadas.

**Caracter√≠sticas Principales de MongoDB:**

1. üìÑ **Modelo de Datos de Documentos:** MongoDB almacena datos en documentos BSON (Binary JSON), lo que permite una estructura flexible y anidada. Esto facilita la representaci√≥n de datos semiestructurados.

2. üöÄ **Escalabilidad Horizontal:** MongoDB es altamente escalable, lo que significa que puedes distribuir tu base de datos en m√∫ltiples servidores para manejar grandes vol√∫menes de datos y cargas de trabajo.

3. üîç **Consultas y Agregaciones Poderosas:** MongoDB ofrece un lenguaje de consulta avanzado y un conjunto de herramientas para realizar consultas, agregaciones y an√°lisis de datos.

4. üõ°Ô∏è **Alta Disponibilidad y Tolerancia a Fallos:** MongoDB admite replicaci√≥n autom√°tica y tolerancia a fallos, lo que garantiza que los datos est√©n siempre disponibles.

5. üìë **√çndices y Text Search:** Ofrece capacidades de indexaci√≥n para mejorar la velocidad de las consultas y tambi√©n admite b√∫squeda de texto completo.

6. üíº **Transacciones ACID:** A partir de la versi√≥n 4.0, MongoDB ofrece transacciones ACID para garantizar la consistencia de los datos en aplicaciones empresariales.

7. üåê **Soporte para M√∫ltiples Plataformas:** MongoDB se ejecuta en una variedad de sistemas operativos y plataformas, lo que lo hace vers√°til y adecuado para una amplia gama de casos de uso.

### MongoDb

Para probar MongoDB Atlas, el servicio de base de datos en la nube de MongoDB, sigue estos pasos para obtener una cuenta gratuita y comenzar a usarlo:

1. **Visita el Sitio Web de MongoDB:**
   Abre tu navegador web y visita el sitio web oficial de MongoDB en https://www.mongodb.com/es.

2. **Clic en "Comienza Gratis":**
   En la p√°gina de inicio, es probable que encuentres un bot√≥n o enlace que diga "Comienza Gratis" o algo similar. Haz clic en ese enlace.

3. **Crea una Cuenta o Inicia Sesi√≥n:**
   Si a√∫n no tienes una cuenta de MongoDB, te pedir√°n que la crees. De lo contrario, inicia sesi√≥n con tus credenciales existentes.

4. **Completa el Formulario de Registro:**
   Si est√°s creando una cuenta, deber√°s proporcionar informaci√≥n como tu nombre, direcci√≥n de correo electr√≥nico y contrase√±a. Rellena el formulario y sigue las instrucciones.

5. **Verifica tu Correo Electr√≥nico:**
   Despu√©s de registrarte, es posible que debas verificar tu direcci√≥n de correo electr√≥nico. Revisa tu bandeja de entrada para un correo de verificaci√≥n de MongoDB y sigue las instrucciones para confirmar tu direcci√≥n de correo.

6. **Comienza con MongoDB Atlas:**
   Una vez que hayas completado el registro y verificado tu direcci√≥n de correo, inicia sesi√≥n en tu cuenta. Busca opciones relacionadas con MongoDB Atlas o "Crear un Proyecto" en tu panel de control.

7. **Configura tu Proyecto en MongoDB Atlas:**
   Sigue las instrucciones para configurar un nuevo proyecto en MongoDB Atlas. Esto implicar√° seleccionar una nube, una regi√≥n, configurar opciones de seguridad, etc.

8. **Crea un Cluster Gratuito:**
   Durante la configuraci√≥n de tu proyecto, podr√°s crear un cl√∫ster gratuito. Selecciona la opci√≥n gratuita o de prueba, y sigue las instrucciones para lanzar tu cl√∫ster en la nube.

9. **Con√©ctate a tu Cl√∫ster:**
   Una vez que el cl√∫ster est√© en funcionamiento, podr√°s conectarte a trav√©s de la cadena de conexi√≥n proporcionada, ya sea a trav√©s de la l√≠nea de comandos o una herramienta de MongoDB.

Recuerda que MongoDB Atlas ofrece una capa gratuita con ciertas restricciones de uso. A medida que tu proyecto crezca, es posible que desees considerar las opciones de actualizaci√≥n y pago seg√∫n tus necesidades. ¬°Disfruta explorando MongoDB con MongoDB Atlas!

En Mongo, los conceptos claves son:
- los <b>Documentos</b>: un documento corresponde a objeto JSON.
- las <b>Colecciones</b>: una colecci√≥n es un conjunto de documentos. Nota Bene: en una colecci√≥n Mongo, los documentos pueden tener una estructura distinta.

En Mongo, no existen directamente los conceptos de Tabla, Tupla o Claves primerias/foraneas. Sin embargo, podemos ver una equivalencia entre Tabla y Colecci√≥n, y entre Tupla y Documento.

Verificar que Mongo est√° instalado correctamente ejecutando:
- el programa principal del SGBD: <code>mongod &</code> desde un terminal
- el programa CLI (Command Line Interface): <code>mongo</code>

## Utilizar Mongo desde el Terminal

Seguir el Tutorial "Mongo" de TutorialsPoint.com: https://www.tutorialspoint.com/mongodb/index.htm

## Utilizar Mongo desde un entorno Python

Vamos a interactuar con Mongo desde un entorno Python, por lo tanto utilizaremos el driver <code>PyMongo</code> (que instalar).
"""

pip install pymongo

from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
uri = "mongodb+srv://BIG_DATA_EJEMPLO:TodyFtzHKBOw886d@cluster0.nmkhay1.mongodb.net/?retryWrites=true&w=majority"
# Create a new client and connect to the server
client = MongoClient(uri, server_api=ServerApi('1'))
# Send a ping to confirm a successful connection
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(e)

"""Ver informaci√≥n de la conexi√≥n"""

client.stats

"""

- `Database`: Esto indica que se trata de una instancia de una base de datos en MongoDB.

- `MongoClient`: Indica que se ha utilizado el cliente MongoDB para establecer una conexi√≥n con un conjunto de servidores de MongoDB. El cliente MongoDB es responsable de la conexi√≥n a la base de datos.

- `host`: Aqu√≠ se especifica la informaci√≥n de los servidores de MongoDB a los que se ha conectado. La conexi√≥n se realiza a trav√©s de una lista de hosts que forman parte de un conjunto de r√©plicas (replica set) en MongoDB. Cada servidor est√° identificado por su direcci√≥n IP o nombre de host y n√∫mero de puerto (en este caso, el puerto 27017).

- `document_class`: Esto parece indicar el tipo de clase que se utiliza para representar documentos en la base de datos. En este caso, se est√° utilizando un diccionario (dict) para representar los documentos.

- `tz_aware`: Indica si la base de datos es consciente de la zona horaria (timezone-aware). En este caso, se establece en `False`, lo que significa que la base de datos no tiene en cuenta las zonas horarias.

- `connect`: Indica si la conexi√≥n a la base de datos est√° activada. En este caso, est√° configurado como `True`, lo que significa que la conexi√≥n est√° habilitada.

- `retrywrites`: Este par√°metro controla si se deben volver a intentar las escrituras en caso de error. Est√° configurado como `True`, lo que significa que las escrituras se reintentar√°n en caso de error.

- `w`: Indica el nivel de consistencia de escritura. En este caso, est√° configurado como 'majority', lo lo que significa que se espera que la mayor√≠a de los miembros del conjunto de r√©plicas confirmen las escrituras.

- `authsource`: Indica la base de datos de autenticaci√≥n. En este caso, se establece como 'admin', lo que significa que la autenticaci√≥n se realiza en la base de datos "admin".

- `replicaset`: Hace referencia al nombre del conjunto de r√©plicas al que se ha conectado.

- `tls`: Indica si se est√° utilizando TLS (Transport Layer Security) para la conexi√≥n segura a MongoDB. En este caso, est√° configurado como `True`, lo que significa que se est√° utilizando TLS.

- `server_api`: Puede estar relacionado con la configuraci√≥n de una versi√≥n espec√≠fica de la API del servidor MongoDB.
"""

print(client.list_database_names())

"""La informaci√≥n de las bases de datos disponibles se encuentra en [aqu√≠](https://www.mongodb.com/docs/atlas/sample-data/)

**Establece el nombre de la base de datos con la que trabajar. Si no existe, se crear√° tan pronto como se a√±ada un documento.**
"""

db=client.sample_airbnb

"""Revisemos las colecciones asociadas a la base de datos"""

db.list_collection_names()

"""Para acceder a la colecci√≥n"""

coleccion=db.listingsAndReviews
coleccion

documentos=coleccion.find()
for documento in documentos[0:5]:
    print(documento)

"""Revisi√≥n de claves"""

list(db.listingsAndReviews.find_one())

db = client.ejemplo
client.list_database_names()

db.create_collection('adressbook')

list (db.list_collections())

# Set the collection to work with
collection = db.adressbook
collection.insert_one({'name' : 'Antonino'})

list (collection.find())

# Renombrar una colecci√≥n
db.adressbook.rename('agenda')
colecci√≥n = db.agenda  # Establecer la colecci√≥n con la que trabajar
list(db.list_collections())  # Mostrar las colecciones existentes

# Eliminar una colecci√≥n
db.drop_collection('agenda')

"""**Operaciones B√°sicas en Colecciones**

Operadores de Consulta - Crear, Leer, Actualizar y Eliminar (un documento)

Crear un documento con: insert_one()


Para insertar un documento se puede hacer usando: insert_one y notaci√≥n  { 'nombreDelAtributo1' : 'contenido1', 'nombreDelAtributo2' : 'contenido2', ... }
"""

#@title Contact

Name = "Antoninoaefef" #@param {type:"string"}
Age = 41 #@param {type:"slider", min:10, max:80, step:1}
Gender = "Female" #@param ["Male", "Female"]
Likes_Python = "Yes" #@param ["Yes", "No"]
if Likes_Python is "Yes":
  Likes_Python = True
else:
  Likes_Python = False


#@markdown Address
Street = "Torrentfghfjfgj" #@param {type:"string"}
Number = 70 #@param {type:"integer"}
City = "Barcelonacvn" #@param {type:"string"}
PostalCode = "080124" #@param {type:"string"}

data = {  'name' : Name ,                                    # String
          'age' : Age,                                       # Integer
          'gender' : Gender,                                 # String
          'likes_python' : Likes_Python,                     # Boolean
          'address': {
              'street' : Street,                             # String ( special character with escape \ )
              'number' : Number,                             # Integer
              'city' : City,                                 # String
              'floor' : None,                                # Null
              'postalcode' : PostalCode,                     # String containing a number
              },
          'favouriteFruits': ['banana','pineapple','orange'] # Array
       }

insert_result = collection.insert_one( data)

insert_result.acknowledged

insert_result.inserted_id

"""**Leer documento  con: find()**

Para leer un documento se puede hacer utilizando find y notaci√≥n en JavaScript { 'atributo1 que contiene la clave' : 'clave1 a encontrar' }
"""

list ( collection.find() )

list ( collection.find( {'_id' : insert_result.inserted_id } ))

list ( collection.find( {'name' : 'Antonino' } ))

list ( collection.find( {'address.city' : City } ))

list ( collection.find().limit(1) )

list ( collection.find().skip(1) )

"""**Actualizar un documento con: update_one()**"""

Name

update_result = collection.update_one(
    {'name' : Name},
    {'$set' : { 'age' : 30 }} )

list (collection.find( {'name' : Name } ))

update_result.raw_result

insert_result = collection.update_one( {'name' : 'Juan Gomez'}, {'$set' : { 'age' : 85 }}, upsert= True )
list (collection.find( {'name' : 'Juan Gomez'} ))

list(collection.find().limit(10))

"""**Eliminar un documento con: delete_one()**


"""

delete = collection.delete_one({'name': 'Juan Gomez'})

delete.deleted_count   # informs that 1 document has been deleted

collection.delete_one({'name': Name})

"""### Crear, Leer, Actualizar, Eliminar (muchos documentos)

Crear un documento con: insert_many()
Para insertar varios documentos se puede hacer utilizando insert_many y notaci√≥n  { 'atributoDocumento1' : 'contenido1' }, { 'atributoDocumento2' : 'contenido2' }, { ... }
"""

import datetime
collection.insert_many(  [                          # <---- start a list with [
##  Insert Document 1
  {
  'name': 'Jordi Gonzalez',
  'age': 25,
  'likes_python': True,
  'registered': datetime.datetime(2015, 2, 11, 4, 22, 39),
  'address': {
      'street': 'Torrent de l\'Olla',
      'number': 70,
      'floor': None,
      'city': 'Barcelona',
      'postalCode': '08012'
             },
  'height':  1.72,
  'favouriteFruits': ['banana','pineapple','orange']
  },

##  Insert Document 2
  {
  'name': 'Maria Smith',
  'age': 30,
  'likes_python': True,
  'registered': datetime.datetime(2016, 4, 23, 7, 34, 12),
  'address': {
      'street': 'Numancia',
                                                     ##  missing number
                                                     ##  missing floor
      'city': 'Barcelona',
      'postalCode': '08029'
             },
  'height':  1.56,
  'favouriteFruits': ['lemon','pineapple']
  }
  ]   )                                                   # <---- finalize the list ]

"""### Leer varios documentos con find():
"Para leer un documento se puede hacer utilizando `find` y notaci√≥n  { 'atributo1 que contiene la clave' : 'clave1 a encontrar' }"
"""

list ( collection.find( {'$or': [ {'name': 'Jordi Gonzalez'},{'name': 'Maria Smith'} ]}))

""" **Actualizar varios documentos con: update_many()**"""

collection.update_many( {'isActive': True }, {'$set' : { 'isActive': False }} )
list (collection.find( ))

"""**Borrar varios documentos con: delete_many()**"""

delete = collection.delete_many({'likes_python': True})
list (collection.find( ))

delete.deleted_count

client.close()

"""# Estaciones de bicicletas"""

!pip install folium

import pymongo                            # Library to access MongoDB
from pymongo import MongoClient           # Imports MongoClient
import pandas as pd                       # Library to work with dataframes
import folium                             # Library to visualize a map

dataset = "https://raw.githubusercontent.com/Giffy/MongoDB_PyMongo_Tutorial/master/resources/bicing_data.csv"
!wget $dataset

# Definir la URI de conexi√≥n
uri = "mongodb+srv://Zainea:4JODSMLaVrXziVK6@clustermongo.2vcbgpa.mongodb.net/test"

# Conectar a la base de datos
client = MongoClient(uri)

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# # Seleccionar la base de datos y la colecci√≥n
# db = client.brny4kjelauboxl
# collection = db.bicing
# 
# # Cargar el conjunto de datos desde un archivo CSV
# df = pd.read_csv("/content/bicing_data.csv")  # Reemplaza "ruta_del_archivo.csv" con la ruta de tu archivo CSV
# 
# # Convertir el DataFrame a un formato adecuado para MongoDB (lista de diccionarios)
# data = df.to_dict(orient="records")
# 
# # Insertar los datos en la colecci√≥n
# collection.insert_many(data)

"""##3. Conexi√≥n a la Base de Datos"""

db = client.brny4kjelauboxl               # Set the database to work on
db.list_collection_names()                # List the collections available
collection = db.bicing                    # Collection alias

"""##4. Revisi√≥n R√°pida"""

num_documents = collection.count_documents({'_id' : {'$exists' : 1}})
print ( 'Number of documents in database = ' + str(num_documents) )
list ( collection.find().limit(1) )

bikes_list = list(collection.distinct('bikes'))             # list the unique values of 'bikes', we get a list of strings
for num in bikes_list:                                      # iterate the list, item by item
  collection.update_many({'bikes' : num},{'$set': {'bikes' : int(num)}})    # update each document with a number in string with the same number as Integer

"""Consulta a la base de datos: Obtener estaciones activas con al menos 3 bicicletas."""

filters = {'status':'OPN', 'bikes' : {'$gte' : 3 }}   # Usage of gte Query Operator  $gte = "greater than or equal"
fields = { '_id', 'latitude' , 'longitude', 'bikes', 'slots'}

query = list( collection.find( filters , fields ) )
df = pd.DataFrame ( query )                             # Load the database reply in a Pandas DataFrame

print ( 'Numer of active stations with at least 3 bicycles: ' + str(len (query)) )

df.iloc[0] # prints the first DataFrame row

"""##6. Marca de estaciones en mapa"""

center_lat = 41.378
center_lon = 2.139

locationmap = folium.Map(location=[ center_lat , center_lon ], zoom_start=16, width=800, height=600 )
longitud  = len( df )

for i in range ( longitud ):
    lng = float(df.iloc[i]['longitude'])
    lat = float(df.iloc[i]['latitude'])
    description = 'Bikes: ' + str(df.iloc[i]['bikes']) + '<br> Empty slots: ' + str(df.iloc[i]['slots'])
    folium.Marker( [ lat , lng ],
                 popup= description,
                 icon=folium.Icon(color='red')).add_to(locationmap)

locationmap

"""Est√°s son algunas equivalencias de Sql con Mongo db:

| Operaci√≥n               | MongoDB                   | SQL                                          |
|-------------------------|---------------------------|----------------------------------------------|
| Seleccionar todos       | `db.collection.find({})`   | `SELECT * FROM table;`                       |
| Seleccionar campos      | `db.collection.find({}, {field1: 1, field2: 1})` | `SELECT field1, field2 FROM table;`         |
| Filtrar                 | `db.collection.find({field: value})` | `SELECT * FROM table WHERE field = value;`  |
| Limitar resultados       | `db.collection.find({}).limit(n)` | `SELECT * FROM table LIMIT n;`               |
| Ordenar resultados      | `db.collection.find({}).sort({field: 1})` | `SELECT * FROM table ORDER BY field ASC;`   |
| Contar documentos       | `db.collection.count({})`   | `SELECT COUNT(*) FROM table;`                |
| Mayor que               | `db.collection.find({field: {$gt: value}})` | `SELECT * FROM table WHERE field > value;`  |
| Menor que               | `db.collection.find({field: {$lt: value}})` | `SELECT * FROM table WHERE field < value;`  |
| Igual a                 | `db.collection.find({field: value})` | `SELECT * FROM table WHERE field = value;`  |
| No igual a              | `db.collection.find({field: {$ne: value}})` | `SELECT * FROM table WHERE field <> value;` |
| AND l√≥gico              | `db.collection.find({$and: [{field1: value1}, {field2: value2}]})` | `SELECT * FROM table WHERE field1 = value1 AND field2 = value2;` |
| OR l√≥gico               | `db.collection.find({$or: [{field1: value1}, {field2: value2}]})` | `SELECT * FROM table WHERE field1 = value1 OR field2 = value2;` |
| Insertar documento      | `db.collection.insert({field1: value1, field2: value2})` | `INSERT INTO table (field1, field2) VALUES (value1, value2);` |
| Actualizar documento    | `db.collection.update({field: value}, {$set: {newField: newValue}})` | `UPDATE table SET newField = newValue WHERE field = value;` |
| Eliminar documento      | `db.collection.remove({field: value})` | `DELETE FROM table WHERE field = value;`      |
| Agrupar y sumar         | `db.collection.aggregate([{$group: {_id: "$field", total: {$sum: "$quantity"}}}])` | `SELECT field, SUM(quantity) FROM table GROUP BY field;` |
| Buscar texto            | `db.collection.find({field: /pattern/})` | `SELECT * FROM table WHERE field LIKE '%pattern%';` |
| √çndices                 | `db.collection.createIndex({field: 1})` | `CREATE INDEX index_name ON table(field);`    |
| Uni√≥n                   | No aplicable              | `SELECT * FROM table1 JOIN table2 ON table1.field = table2.field;` |
| Joins                   | No aplicable              | `SELECT * FROM table1 LEFT JOIN table2 ON table1.field = table2.field;` |
| Agregar columna calculada | No aplicable            | `SELECT field1, field2, field1 + field2 AS calculated FROM table;` |
| Transacciones           | `db.collection.runCommand({beginTransaction: 1})...` | `START TRANSACTION; ... COMMIT;`            |

A continuaci√≥n se muestran algunas  funciones de agregaci√≥n en MongoDB usando el m√©todo `aggregate` en PyMongo, junto con ejemplos y sus equivalentes en SQL:

| Operaci√≥n Agregada      | MongoDB (PyMongo)                       | SQL                            |
|-------------------------|----------------------------------------|--------------------------------|
| Suma                    | `{"$sum": "$field"}`                   | `SUM(field)`                   |
| Promedio                | `{"$avg": "$field"}`                   | `AVG(field)`                   |
| M√≠nimo                  | `{"$min": "$field"}`                   | `MIN(field)`                   |
| M√°ximo                  | `{"$max": "$field"}`                   | `MAX(field)`                   |
| Conteo                  | `{"$count": "field"}`                  | `COUNT(field)`                 |
| Conteo Distinto         | `{"$addToSet": "$field"}`              | `COUNT(DISTINCT field)`        |
| Agrupaci√≥n              | `{"$group": {"_id": "$field", "total": {"$sum": 1}}}` | `SELECT field, COUNT(*) as total FROM table GROUP BY field` |
| Proyecci√≥n de Campos    | `{"$project": {"newField": "$field"}}` | `SELECT field AS newField FROM table` |
| Orden Ascendente        | `{"$sort": {"field": 1}}`               | `ORDER BY field ASC`           |
| Orden Descendente       | `{"$sort": {"field": -1}}`              | `ORDER BY field DESC`          |
| Unwind (Desenrollar)    | `{"$unwind": "$arrayField"}`            | `SELECT field, unnest(arrayField) FROM table` |
| Filtro                  | `{"$match": {"field": value}}`          | `WHERE field = value`          |
"""

db1=client.sample_restaurants

list(db1.list_collection_names())

collection1=db1.restaurants
consulta=list(collection1.find())

db2=client.ejemplo
collection2=db2.restaurants

collection2.insert_many(consulta)

"""## Taller

Usando la colecci√≥n de `sample_restaurants`  en las bases de datos de ejemplo de mongo, realice los siguientes ejercicios en un nuevo cuadernillo:

Cree una copia de la colecci√≥n `restaurants` en un documento creado por usted, probre esta colecci√≥n realice los siguientes ejercicios:b

**1.** Escribe una consulta de MongoDB para mostrar todos los documentos en la colecci√≥n de `sample_restaurants`.

**2.** Escribe una consulta de MongoDB para mostrar los campos restaurant_id, name, borough y cuisine de todos los documentos en la colecci√≥n de `sample_restaurants`.

**3.** Escribe una consulta de MongoDB para mostrar los campos restaurant_id, name, borough y cuisine, pero excluyendo el campo _id de todos los documentos en la colecci√≥n de `sample_restaurants`.

**4.** Escribe una consulta de MongoDB para mostrar los campos restaurant_id, name, borough y zip code, pero excluyendo el campo _id de todos los documentos en la colecci√≥n de `sample_restaurants`.

**5.** Escribe una consulta de MongoDB para mostrar todos los `sample_restaurants` que se encuentran en el distrito Bronx.

**6.** Escribe una consulta de MongoDB para mostrar los primeros 5 `sample_restaurants` que se encuentran en el distrito Bronx.

**7.** Escribe una consulta de MongoDB para mostrar los siguientes 5 `sample_restaurants` despu√©s de omitir los primeros 5 que se encuentran en el distrito Bronx.

**8.** Escribe una consulta de MongoDB para encontrar los `sample_restaurants` que obtuvieron una puntuaci√≥n superior a 90.

**9.** Escribe una consulta de MongoDB para encontrar los `sample_restaurants` que obtuvieron una puntuaci√≥n superior a 80 pero inferior a 100.

**10.** Escribe una consulta de MongoDB para encontrar los `sample_restaurants` que se encuentran en una latitud inferior a -95.754168, muestralos marcados en el mapa usando follium.

**11.** Escribe una consulta de MongoDB para encontrar los `sample_restaurants` que no preparan ninguna cocina 'Americana', tienen una puntuaci√≥n superior a 70 y una latitud inferior a -65.754168, muestralos marcados en el mapa usando follium.

**12.** Escribe una consulta de MongoDB para encontrar los `sample_restaurants` que no preparan ninguna cocina 'Americana', obtuvieron una puntuaci√≥n superior a 70 y est√°n ubicados en una longitud inferior a -65.754168. (Nota: Haz esta consulta sin usar el operador $and).

**13.** Escribe una consulta de MongoDB para encontrar los `sample_restaurants` que no preparan ninguna cocina 'Americana', obtuvieron una puntuaci√≥n de grado 'A' y no pertenecen al distrito Brooklyn. El documento debe mostrarse seg√∫n la cocina en orden descendente.

**14.** Escribe una consulta de MongoDB para encontrar el Id, nombre, distrito y cocina de aquellos `sample_restaurants` que contienen 'Wil' como las primeras tres letras de su nombre.

**15.** Escribe una consulta de MongoDB para encontrar el Id, nombre, distrito y cocina de aquellos `sample_restaurants` que contienen 'ces' como las √∫ltimas tres letras de su nombre, muestralos marcados en el mapa usando follium.

**16.** Escribe una consulta de MongoDB para encontrar el Id, nombre, distrito y cocina de aquellos `sample_restaurants` que contienen 'Reg' como tres letras en alg√∫n lugar de su nombre.

**17.** Escribe una consulta de MongoDB para encontrar los `sample_restaurants` que pertenecen al distrito Bronx y preparan platos americanos o chinos.

**18.** Escribe una consulta de MongoDB para encontrar el Id, nombre, distrito y cocina de aquellos `sample_restaurants` que pertenecen a los distritos Staten Island, Queens, Bronx o Brooklyn.

**19.** Escribe una consulta de MongoDB para encontrar el Id, nombre, distrito y cocina de aquellos `sample_restaurants` que no pertenecen a los distritos Staten Island, Queens, Bronx o Brooklyn.

**20.** Escribe una consulta de MongoDB para encontrar el Id, nombre, distrito y cocina de aquellos `sample_restaurants` que obtuvieron una puntuaci√≥n que no es mayor a 10.

**21.** Escribe una consulta de MongoDB para encontrar el Id, nombre, distrito y cocina de aquellos `sample_restaurants` que preparan platos que no son 'Americanos' ni 'Chinos' o cuyo nombre comienza con la letra 'Wil'.

**22.** Escribe una consulta de MongoDB para encontrar el Id, nombre y grados de aquellos `sample_restaurants` que obtuvieron una calificaci√≥n de "A" y una puntuaci√≥n de 11 en una fecha ISODate "2014-08-11T00:00:00Z" entre muchas fechas de encuestas.

**23.** Escribe una consulta de MongoDB para encontrar el Id, nombre y grados de aquellos `sample_restaurants` donde el segundo elemento del array de grados contiene una calificaci√≥n de "A" y una puntuaci√≥n de 9 en una fecha ISODate "2014-08-11T00:00:00Z".

**24.** Escribe una consulta de MongoDB para encontrar el Id, nombre, direcci√≥n y ubicaci√≥n geogr√°fica de aquellos `sample_restaurants` donde el segundo elemento del array de coordenadas contiene un valor que es mayor a 42 y hasta 52.

**25.** Escribe una consulta de MongoDB para organizar el nombre de los `sample_restaurants` en orden ascendente junto con todas las columnas.

**26.** Escribe una consulta de MongoDB para organizar el nombre de los `sample_restaurants` en orden descendente junto con todas las columnas.

**27.** Escribe una consulta de MongoDB para organizar el nombre de la cocina en orden ascendente y, para esa misma cocina, el distrito deber√≠a estar en orden descendente.

**28.** Escribe una consulta de MongoDB para saber si todas las direcciones contienen la calle o no.

**29.** Escribe una consulta de MongoDB que seleccionar√° todos los documentos en la colecci√≥n de `sample_restaurants` donde el valor del campo coord sea Double.

**30.** Escribe una consulta de MongoDB que seleccionar√° el Id del restaurante, nombre y grados de aquellos `sample_restaurants` que devuelven 0 como residuo despu√©s de dividir la puntuaci√≥n por 7.

**31.** realice una cosulta que considere interesante directamente en mongo atlas, realice la gr√°fica n charts de Mongo Atlas e insertela ac√° como el siguiente ejemplo.

"""

from IPython.display import HTML

# URL del gr√°fico embebido
url = "https://charts.mongodb.com/charts-project-0-mrsoq/embed/charts?id=654d4348-0760-4bcf-8caa-3216f7c4de2f&maxDataAge=-1&theme=dark&autoRefresh=false"

# Generar el c√≥digo HTML con la etiqueta <iframe>
iframe_code = f'<iframe src="{url}" width="800" height="600" frameborder="0"></iframe>'

# Mostrar el gr√°fico embebido en Colab
HTML(iframe_code)